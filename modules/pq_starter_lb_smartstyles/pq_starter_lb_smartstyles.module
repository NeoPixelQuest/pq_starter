<?php
/**
 * @file
 * Contains hooks for the module for Layout Builder - Smart Styles.
 */


/**
 * Implements hook_help().
 */
function pq_starter_lb_smartstyles_help($route_name, $route_match) {
  if ($route_name === 'help.page.pq_starter_lb_smartstyles') {
    $output = '<p>' . t('This module helps by extracting the various Layout Builder Styles designated for Layouts from the full default attributes.class array and puts them into the following:') . '</p>';
    $output .= '<ul>';
    $output .= '<li><strong>layout_container</strong>: ' . t('A specific array that sets the classes defined for the Layout Container options (layout_container__full_width or layout_container__centered).') . '</li>';
    $output .= '<li><strong>layout_full_width</strong>: ' . t('A Boolean to help determine during the twig theming whether the selected option is for a full page width or not.') . '</li>';
    $output .= '<li><strong>layout_styles</strong>: ' . t('An array containing all of the rest of the defined and set Layout Styles classes.') . '</li>';
    $output .= '</ul>';
    $output .= '<p>' . t('A simple example of rendering the arrays in twig: {{ layout_styles|join( \' \')|trim }}') . '</p>';
    return $output;
  }

  return '';
}

/**
 * Implements hook_library_info_alter().
 */
function pq_starter_lb_smartstyles_library_info_alter(array &$libraries, string $extension) {
  if ($extension !== 'pq_starter_lb_smartstyles') {
    return;
  }

  $libraries['gin_lb_helper'] = [
    'css' => [
      'theme' => [
        'css/gin_lb_smartstyles.css' => [],
      ]
    ]
  ];
}

/**
 * Implements hook_preprocess_hook().
 */
function pq_starter_lb_smartstyles_preprocess_layout(&$variables) {
  // Get the current theme and admin theme. If they are the same, exit out.
  $current_theme = \Drupal::theme()->getActiveTheme()->getName();
  $admin_theme = \Drupal::config('system.theme')->get('admin');
  if ($current_theme === $admin_theme) {
    return;
  }

  // No layout builder styles are set. Exit out.
  if (!array_key_exists('layout_builder_styles_style', $variables['settings'])) {
    return;
  }

  // Attach the gin_lb_helper CSS to help with rendering of the options.
  $variables['#attached']['library'][] = 'pq_starter_lb_smartstyles/gin_lb_helper';

  // Go through and check the set settings for the Layout Styles.
  $variables['layout_full_width'] = FALSE;
  $customStyles = [];
  $setStyles = $variables['settings']['layout_builder_styles_style'];
  $configPrefix = 'layout_builder_styles.style.';
  $configFactory = \Drupal::configFactory();

  foreach ($setStyles as $styleId) {
    $splitClasses = _pq_starter_lb_smartstyles_process_config_values($configFactory, $configPrefix . $styleId, $variables['attributes']['class']);
    $variables['attributes']['class'] = $splitClasses['updatedClasses'];

    // Set a specific variable for the layout container
    if (str_starts_with($styleId, 'layout_container__')) {
      if ($styleId === 'layout_container__full_width') {
        $variables['layout_full_width'] = TRUE;
      }
      $variables['layout_container'] = $splitClasses['separatedClasses'];
    }
    else {
      $customStyles = array_merge($customStyles, $splitClasses['separatedClasses']);
    }
  }

  $variables['layout_styles'] = $customStyles;
}

/**
 * @param $configFactory
 *   Drupal's Config Factory.
 * @param $configName
 *   The config to load.
 * @param $existingClasses
 *   The passed existing CSS Classes to thin out.
 *
 * @return array
 *   Multidimensional array of the separated layout classes and the remaining default classes.
 */
function _pq_starter_lb_smartstyles_process_config_values($configFactory, $configName, $existingClasses) {
  $layoutStyles = [];
  $config = $configFactory->get($configName);

  $classes = $config->get('classes');
  if (!empty($classes)) {
    $layoutStyles = preg_split('/\r\n|\r|\n/', $classes);
  }

  $updatedClasses = array_diff($existingClasses, $layoutStyles);

  return [
    'separatedClasses' => $layoutStyles,
    'updatedClasses' => $updatedClasses,
  ];
}